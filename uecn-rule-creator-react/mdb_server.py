#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ MDB —Ñ–∞–π–ª–æ–≤ –≤ JSON
"""

import os
import json
import tempfile
import subprocess
from flask import Flask, request, jsonify
from flask_cors import CORS
import logging

app = Flask(__name__)
CORS(app)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_mdbtools():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ mdb-tools"""
    try:
        result = subprocess.run(['mdb-ver', '--help'], 
                                capture_output=True, text=True, timeout=5)
        return True
    except:
        return False

def get_table_info(mdb_path, table_name):
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã
        schema_result = subprocess.run(['mdb-schema', mdb_path, '-T', table_name], 
                                       capture_output=True, text=True, timeout=30)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
        columns_result = subprocess.run(['mdb-export', mdb_path, table_name], 
                                        capture_output=True, text=True, timeout=30)
        
        if columns_result.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã {table_name}: {columns_result.stderr}")
            return None
            
        lines = columns_result.stdout.strip().split('\n')
        if len(lines) < 1:
            return None
            
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [col.strip('"') for col in lines[0].split(',')]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        sample_values = {}
        if len(lines) > 1:
            values = lines[1].split(',')
            for i, header in enumerate(headers):
                if i < len(values):
                    sample_value = values[i].strip('"').strip()
                    if sample_value and sample_value != header:
                        sample_values[header] = sample_value
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        count_result = subprocess.run(['mdb-count', mdb_path, table_name], 
                                      capture_output=True, text=True, timeout=30)
        row_count = 0
        if count_result.returncode == 0:
            try:
                row_count = int(count_result.stdout.strip())
            except:
                row_count = len(lines) - 1 if len(lines) > 1 else 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
        columns = []
        for header in headers:
            columns.append({
                'name': header,
                'sample_value': sample_values.get(header, '')
            })
            
        return {
            'name': table_name,
            'columns': columns,
            'row_count': row_count
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {str(e)}")
        return None

@app.route('/api/convert-mdb', methods=['POST'])
def convert_mdb():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ mdb-tools
        if not check_mdbtools():
            return jsonify({
                'success': False,
                'error': 'mdb-tools –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: brew install mdb-tools'
            }), 500
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
        if 'mdb_file' not in request.files:
            return jsonify({
                'success': False,
                'error': '–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
            }), 400
            
        file = request.files['mdb_file']
        if file.filename == '':
            return jsonify({
                'success': False,
                'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'
            }), 400
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        with tempfile.NamedTemporaryFile(delete=False, suffix='.mdb') as tmp_file:
            file.save(tmp_file.name)
            tmp_path = tmp_file.name
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
            result = subprocess.run(['mdb-tables', '-1', tmp_path], 
                                    capture_output=True, text=True, timeout=30)
            
            if result.returncode != 0:
                return jsonify({
                    'success': False,
                    'error': f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è MDB —Ñ–∞–π–ª–∞: {result.stderr}'
                }), 400
            
            table_names = [name.strip() for name in result.stdout.strip().split('\n') if name.strip()]
            
            if not table_names:
                return jsonify({
                    'success': False,
                    'error': '–í MDB —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü'
                }), 400
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
            tables = []
            for table_name in table_names:
                table_info = get_table_info(tmp_path, table_name)
                if table_info:
                    tables.append(table_info)
            
            if not tables:
                return jsonify({
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—É'
                }), 400
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(tables)} —Ç–∞–±–ª–∏—Ü –∏–∑ —Ñ–∞–π–ª–∞ {file.filename}")
            
            return jsonify({
                'success': True,
                'tables': tables,
                'message': f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(tables)} —Ç–∞–±–ª–∏—Ü'
            })
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.unlink(tmp_path)
            except:
                pass
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ MDB: {str(e)}")
        return jsonify({
            'success': False,
            'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        'status': 'ok',
        'mdb_tools_available': check_mdbtools()
    })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ MDB —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://localhost:8000")
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
    print("   POST /api/convert-mdb - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MDB —Ñ–∞–π–ª–æ–≤")
    print("   GET  /api/health     - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    
    app.run(host='0.0.0.0', port=8000, debug=True) 