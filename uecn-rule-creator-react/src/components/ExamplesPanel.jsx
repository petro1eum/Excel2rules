import { useState, useEffect } from 'react';
import HistoricalWork from './HistoricalWork';

const ExampleCard = ({ title, description, onClick }) => (
    <div className="example-card" onClick={onClick}>
        <div className="example-title">{title}</div>
        <div className="example-description">{description}</div>
    </div>
);

const ExamplesPanel = ({ onLoadExample }) => {
    const [typicalRulesExpanded, setTypicalRulesExpanded] = useState(true);
    const [historicalWorkExpanded, setHistoricalWorkExpanded] = useState(false);
    const [historicalData, setHistoricalData] = useState(null);
    const [isLoadingHistorical, setIsLoadingHistorical] = useState(false);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏
    useEffect(() => {
        if (historicalWorkExpanded && !historicalData && !isLoadingHistorical) {
            loadHistoricalData();
        }
    }, [historicalWorkExpanded]);

    const loadHistoricalData = async () => {
        setIsLoadingHistorical(true);
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
            const response = await fetch('/complete_transformation_summary.json');
            const data = await response.json();
            setHistoricalData(data);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
            const savedData = localStorage.getItem('historicalTransformations');
            if (savedData) {
                setHistoricalData(JSON.parse(savedData));
            }
        } finally {
            setIsLoadingHistorical(false);
        }
    };

    const handleHistoricalDataUpdate = (newData) => {
        setHistoricalData(newData);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        localStorage.setItem('historicalTransformations', JSON.stringify(newData));
    };

    const handleLoadRules = (fileName, rules, fullData) => {
        console.log('Loading rules from:', fileName);
        console.log('Rules:', rules);
        console.log('Full data:', fullData);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ–æ—Ä–º—ã
        const ruleData = {
            ruleName: `–ü—Ä–∞–≤–∏–ª–æ –∏–∑ ${fileName}`,
            problem: fullData['üéØ'] || '–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö',
            priority: 85,
            enabled: true,
            conditionMode: 'all',
            conditions: [],
            mainAction: 'calculate',
            actionDetails: '',
            dataPreparation: [],
            validationChecks: []
        };
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–µ
        const problemStep = fullData['üîÑ_–ü–û–®–ê–ì–û–í–ê–Ø_–¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–Ø']?.find(step => 
            step.–¥–µ–π—Å—Ç–≤–∏–µ === '–ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú' || step.–¥–µ–π—Å—Ç–≤–∏–µ === '–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´'
        );
        if (problemStep) {
            if (problemStep.–Ω–∞–π–¥–µ–Ω–Ω—ã–µ_–ø—Ä–æ–±–ª–µ–º—ã) {
                ruleData.problem = Array.isArray(problemStep.–Ω–∞–π–¥–µ–Ω–Ω—ã–µ_–ø—Ä–æ–±–ª–µ–º—ã) 
                    ? problemStep.–Ω–∞–π–¥–µ–Ω–Ω—ã–µ_–ø—Ä–æ–±–ª–µ–º—ã.join('. ')
                    : problemStep.–Ω–∞–π–¥–µ–Ω–Ω—ã–µ_–ø—Ä–æ–±–ª–µ–º—ã;
            } else if (problemStep.–ø—Ä–æ–±–ª–µ–º–∞) {
                ruleData.problem = problemStep.–ø—Ä–æ–±–ª–µ–º–∞;
            } else if (problemStep.–æ–ø–∏—Å–∞–Ω–∏–µ) {
                ruleData.problem = problemStep.–æ–ø–∏—Å–∞–Ω–∏–µ;
            }
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π
        const changesAnalysis = fullData['‚öôÔ∏è_–ê–ù–ê–õ–ò–ó_–ò–ó–ú–ï–ù–ï–ù–ò–ô'];
        const sourceData = fullData['üì•_–ò–°–•–û–î–ù–´–ï_–î–ê–ù–ù–´–ï'];
        const resultData = fullData['üì§_–†–ï–ó–£–õ–¨–¢–ò–†–£–Æ–©–ò–ï_–î–ê–ù–ù–´–ï'];
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è —Å –¥–∞—Ç–∞–º–∏ –¥–ª—è —É—Å–ª–æ–≤–∏–π
        if (fileName.toLowerCase().includes('–¥–∞—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∞') && fileName.toLowerCase().includes('–ø—Ä–∏—Ö–æ–¥–∫–∏')) {
            // –≠—Ç–æ –ø—Ä–∞–≤–∏–ª–æ –ø—Ä–æ –¥–∞—Ç—ã
            ruleData.conditions.push({
                field: "–î–∞–Ω–Ω—ã–µ.–î–∞—Ç–∞_–ø—Ä–∏—Ö–æ–¥–∞_–Ω–∞_–±–∞–∑—É",
                check: "not_equals",
                value: "–î–∞–Ω–Ω—ã–µ.–î–∞—Ç–∞_–ø—Ä–∏—Ö–æ–¥–Ω–æ–π_–Ω–∞–∫–ª–∞–¥–Ω–æ–π"
            });
            
            // –û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞—Ç
            ruleData.mainAction = 'calculate';
            ruleData.actionDetails = "–í–µ—Ä–Ω–∞—è_–¥–∞—Ç–∞_–ø—Ä–∏—Ö–æ–¥–∞ = –î–∞—Ç–∞_–ø—Ä–∏—Ö–æ–¥–Ω–æ–π_–Ω–∞–∫–ª–∞–¥–Ω–æ–π + 1 —á–∞—Å";
            
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—Ç
            ruleData.dataPreparation.push({ 
                action: "–ü—Ä–∏–≤–µ—Å—Ç–∏ –≤—Å–µ –¥–∞—Ç—ã –∫ —Ñ–æ—Ä–º–∞—Ç—É YYYY-MM-DD HH:mm:ss" 
            });
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            ruleData.validationChecks.push({ 
                check: "–í–µ—Ä–Ω–∞—è_–¥–∞—Ç–∞_–ø—Ä–∏—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π" 
            });
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        const formulas = [];
        Object.values(resultData.–ª–∏—Å—Ç—ã_—Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ_—Ñ–∞–π–ª–∞ || {}).forEach(sheet => {
            if (sheet.—Ñ–æ—Ä–º—É–ª—ã && Array.isArray(sheet.—Ñ–æ—Ä–º—É–ª—ã)) {
                formulas.push(...sheet.—Ñ–æ—Ä–º—É–ª—ã);
            }
        });
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã
        if (formulas.length > 0) {
            const formulaDescriptions = [];
            formulas.forEach(formula => {
                if (formula.includes('–ï—Å–ª–∏') || formula.includes('IF')) {
                    // –≠—Ç–æ —É—Å–ª–æ–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
                    formulaDescriptions.push(formula);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—è
                    if (formula.includes('–ø–∞—Å–ø–æ—Ä—Ç–∞ –ì–ó') && formula.includes('–ø–∞—Å–ø–æ—Ä—Ç–∞ –ü–≠–î')) {
                        ruleData.conditions.push({
                            field: "–î–∞–Ω–Ω—ã–µ.–ù–æ–º–µ—Ä_–ø–∞—Å–ø–æ—Ä—Ç–∞_–ì–ó",
                            check: "not_empty",
                            value: ""
                        });
                        ruleData.conditions.push({
                            field: "–î–∞–Ω–Ω—ã–µ.–ù–æ–º–µ—Ä_–ø–∞—Å–ø–æ—Ä—Ç–∞_–ü–≠–î",
                            check: "not_empty",
                            value: ""
                        });
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
                        formulaDescriptions.push("–ü–∞—Å–ø–æ—Ä—Ç–∞_—Å–æ–≤–ø–∞–¥–∞—é—Ç = IF(–ù–æ–º–µ—Ä_–ø–∞—Å–ø–æ—Ä—Ç–∞_–ì–ó = –ù–æ–º–µ—Ä_–ø–∞—Å–ø–æ—Ä—Ç–∞_–ü–≠–î, '–î–ê', '–ù–ï–¢')");
                    }
                }
            });
            
            if (formulaDescriptions.length > 0 && !ruleData.actionDetails) {
                ruleData.actionDetails = formulaDescriptions.join('\n');
            }
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        if (changesAnalysis?.–¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ_—Å—Ç–æ–ª–±—Ü—ã?.length > 0) {
            changesAnalysis.–¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ_—Å—Ç–æ–ª–±—Ü—ã.forEach(col => {
                if (col.toLowerCase().includes('–≤–µ—Ä–Ω–∞—è') || col.toLowerCase().includes('–Ω–æ–≤–∞—è')) {
                    ruleData.mainAction = 'calculate';
                    if (!ruleData.actionDetails.includes(col)) {
                        ruleData.actionDetails += `\n–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–µ: ${col}`;
                    }
                }
            });
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Å–ª–æ–≤–∏—è –∏–∑ —à–∞–≥–æ–≤ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        const transformationSteps = fullData['üîÑ_–ü–û–®–ê–ì–û–í–ê–Ø_–¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–Ø'] || [];
        transformationSteps.forEach(step => {
            if (step.—É—Å–ª–æ–≤–∏—è_–ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è) {
                // –ü–∞—Ä—Å–∏–º —É—Å–ª–æ–≤–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
                const conditionText = step.—É—Å–ª–æ–≤–∏—è_–ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è;
                if (conditionText.includes('–Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç') || conditionText.includes('!=')) {
                    // –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤—ã—à–µ
                } else if (conditionText.includes('–ø—É—Å—Ç–æ–µ') || conditionText.includes('NULL')) {
                    const fieldMatch = conditionText.match(/–ø–æ–ª–µ\s+['"]?([^'"]+)['"]?/i);
                    if (fieldMatch) {
                        ruleData.conditions.push({
                            field: `–î–∞–Ω–Ω—ã–µ.${fieldMatch[1]}`,
                            check: "empty",
                            value: ""
                        });
                    }
                }
            }
        });
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —É—Å–ª–æ–≤–∏–π
        const uniqueConditions = [];
        const conditionKeys = new Set();
        ruleData.conditions.forEach(cond => {
            const key = `${cond.field}-${cond.check}-${cond.value}`;
            if (!conditionKeys.has(key)) {
                conditionKeys.add(key);
                uniqueConditions.push(cond);
            }
        });
        ruleData.conditions = uniqueConditions;
        
        // –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–π –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ —É—Å–ª–æ–≤–∏–µ
        if (ruleData.conditions.length === 0) {
            ruleData.conditions.push({
                field: "–î–∞–Ω–Ω—ã–µ.ID",
                check: "not_empty",
                value: ""
            });
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ –≤ —Ñ–æ—Ä–º—É
        onLoadExample(ruleData);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const toast = document.createElement('div');
        toast.className = 'toast show success';
        toast.textContent = `‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –∏–∑ "${fileName}" –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Ñ–æ—Ä–º—É`;
        document.body.appendChild(toast);
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    };

    const examples = [
        {
            title: "–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞—Ç –ø—Ä–∏—Ö–æ–¥–∞ –∏ –ø—Ä–∏—Ö–æ–¥–∫–∏",
            description: "–°–∞–º–∞—è —á–∞—Å—Ç–∞—è –ø—Ä–æ–±–ª–µ–º–∞ - –¥–∞—Ç—ã –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã",
            data: {
                ruleName: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞—Ç –ø—Ä–∏—Ö–æ–¥–∞ —Å –Ω–∞–∫–ª–∞–¥–Ω—ã–º–∏",
                problem: "–î–∞—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∞ –Ω–∞ –±–∞–∑—É –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –¥–∞—Ç–æ–π –ø—Ä–∏—Ö–æ–¥–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–ì–ó, –Ω–∞—Å–æ—Å—ã, —Å—Ç–∞—Ç–æ—Ä—ã, –∫–∞–±–µ–ª—å, –°–£, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä—ã)",
                priority: 95,
                conditionMode: "all",
                conditions: [
                    { field: "–î–∞–Ω–Ω—ã–µ.–î–∞—Ç–∞_–ø—Ä–∏—Ö–æ–¥–∞_–Ω–∞_–±–∞–∑—É", check: "not_equals", value: "–î–∞–Ω–Ω—ã–µ.–î–∞—Ç–∞_–ø—Ä–∏—Ö–æ–¥–Ω–æ–π_–Ω–∞–∫–ª–∞–¥–Ω–æ–π" },
                    { field: "–î–∞–Ω–Ω—ã–µ.–ù–æ–º–µ—Ä_–ø—Ä–∏—Ö–æ–¥–Ω–æ–π_–Ω–∞–∫–ª–∞–¥–Ω–æ–π", check: "not_empty", value: "" }
                ],
                mainAction: "calculate",
                actionDetails: "–í–µ—Ä–Ω–∞—è_–¥–∞—Ç–∞_–ø—Ä–∏—Ö–æ–¥–∞ = –î–∞—Ç–∞_–ø—Ä–∏—Ö–æ–¥–Ω–æ–π_–Ω–∞–∫–ª–∞–¥–Ω–æ–π + 1 —á–∞—Å\n–ù–æ–≤—ã–π_–Ω–æ–º–µ—Ä_–ø—Ä–∏—Ö–æ–¥–∫–∏ = LOOKUP(–ù–æ–º–µ—Ä_–ø—Ä–∏—Ö–æ–¥–Ω–æ–π_–Ω–∞–∫–ª–∞–¥–Ω–æ–π, 'WO_—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫')\n–ù–æ–º–µ—Ä_–Ω–∞–∫–ª–∞–¥–Ω–æ–π_–∏–∑_WO = EXTRACT(wo_num, 'invoice_number')",
                dataPreparation: [
                    { action: "–ü—Ä–∏–≤–µ—Å—Ç–∏ –≤—Å–µ –¥–∞—Ç—ã –∫ —Ñ–æ—Ä–º–∞—Ç—É YYYY-MM-DD HH:mm:ss" },
                    { action: "–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –¥–∞—Ç –ø—Ä–∏—Ö–æ–¥–∞ (–î–∞—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∞ –Ω–∞ –±–∞–∑—É –ì–ó ‚Üí –î–∞—Ç–∞_–ø—Ä–∏—Ö–æ–¥–∞_–Ω–∞_–±–∞–∑—É)" }
                ],
                validationChecks: [
                    { check: "–í–µ—Ä–Ω–∞—è_–¥–∞—Ç–∞_–ø—Ä–∏—Ö–æ–¥–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π —Å –Ω–∞–∫–ª–∞–¥–Ω—ã–º–∏" },
                    { check: "–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 7 –¥–Ω–µ–π" }
                ]
            }
        },
        {
            title: "–î–∞—Ç–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–æ–∑–∂–µ –¥–∞—Ç—ã —Ä–∞—Å—Ö–æ–¥–∫–∏",
            description: "–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–≥—Ä—É–∑–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
            data: {
                ruleName: "–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç-—Ä–∞—Å—Ö–æ–¥–∫–∞",
                problem: "–î–∞—Ç–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–æ–∑–∂–µ –¥–∞—Ç—ã —Ä–∞—Å—Ö–æ–¥–∫–∏ - –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞",
                priority: 100,
                conditionMode: "all",
                conditions: [
                    { field: "–î–∞–Ω–Ω—ã–µ.–¥–∞—Ç–∞_—Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ_—Ç–µ—Å—Ç–∞", check: "after", value: "–î–∞–Ω–Ω—ã–µ.–î–∞—Ç–∞_—Ä–∞—Å—Ö–æ–¥–∫–∏" },
                    { field: "–î–∞–Ω–Ω—ã–µ.–ù–æ–º–µ—Ä_—Ä–∞—Å—Ö–æ–¥–∫–∏", check: "not_empty", value: "" }
                ],
                mainAction: "calculate",
                actionDetails: "–†–∞–∑–Ω–∏—Ü–∞_–º–µ–∂–¥—É_—Ñ–∏–Ω_—Ç–µ—Å—Ç–æ–º_–∏_—Ä–∞—Å—Ö–æ–¥–∫–æ–π = DATEDIFF(–¥–∞—Ç–∞_—Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ_—Ç–µ—Å—Ç–∞, –î–∞—Ç–∞_—Ä–∞—Å—Ö–æ–¥–∫–∏)\n–ï—Å–ª–∏ 1 —Ç–æ –¥–∞—Ç–∞_–ø—Ä–∏—Ö–æ–¥–∞=–¥–∞—Ç–∞_–ø–µ—Ä–≤–æ–≥–æ_—Ç–µ—Å—Ç–∞=–¥–∞—Ç–∞_—Ä–∞–∑–±–æ—Ä–∫–∏=–¥–∞—Ç–∞_—Å–±–æ—Ä–∫–∏=–¥–∞—Ç–∞_—Ñ–∏–Ω_—Ç–µ—Å—Ç–∞=–¥–∞—Ç–µ_—Ä–∞—Å—Ö–æ–¥–∫–∏ +1—á–∞—Å\n–ï—Å–ª–∏ 2 –î–∞—Ç–∞_–ø–µ—Ä–≤–æ–≥–æ_—Ç–µ—Å—Ç–∞=–¥–∞—Ç–µ_—Ä–∞–∑–±–æ—Ä–∫–∏=–¥–∞—Ç–µ_—Å–±–æ—Ä–∫–∏=–¥–∞—Ç–∞_—Ñ–∏–Ω_—Ç–µ—Å—Ç–∞=–¥–∞—Ç–µ_—Ä–∞—Å—Ö–æ–¥–∫–∏",
                dataPreparation: [
                    { action: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö –º–µ–∂–¥—É —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ç–µ—Å—Ç–æ–º –∏ —Ä–∞—Å—Ö–æ–¥–∫–æ–π" },
                    { action: "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ä–µ–º–æ–Ω—Ç–∞: 1 - —ç–∫—Å–ø—Ä–µ—Å—Å (< 1 –¥–Ω—è), 2 - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π" }
                ],
                validationChecks: [
                    { check: "–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω –î–û —Ä–∞—Å—Ö–æ–¥–∫–∏" },
                    { check: "–î–ª—è —ç–∫—Å–ø—Ä–µ—Å—Å-—Ä–µ–º–æ–Ω—Ç–∞ –≤—Å–µ –¥–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã" }
                ]
            }
        },
        {
            title: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ –ì–ó –∏ –ü–≠–î",
            description: "–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Å–±–æ—Ä–∫–µ",
            data: {
                ruleName: "–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–∞—Å–ø–æ—Ä—Ç–æ–≤",
                problem: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–∞—Å–ø–æ—Ä—Ç–∞–º–∏ –ì–ó –∏ –ü–≠–î –≤ –æ–¥–Ω–æ–π —Å–±–æ—Ä–∫–µ",
                priority: 85,
                conditionMode: "all",
                conditions: [
                    { field: "–î–∞–Ω–Ω—ã–µ.–ù–æ–º–µ—Ä_–ø–∞—Å–ø–æ—Ä—Ç–∞_–ì–ó", check: "not_empty", value: "" },
                    { field: "–î–∞–Ω–Ω—ã–µ.–ù–æ–º–µ—Ä_–ø–∞—Å–ø–æ—Ä—Ç–∞_–ü–≠–î", check: "not_empty", value: "" }
                ],
                mainAction: "calculate",
                actionDetails: "–ü–∞—Å–ø–æ—Ä—Ç–∞_—Å–æ–≤–ø–∞–¥–∞—é—Ç = IF(–ù–æ–º–µ—Ä_–ø–∞—Å–ø–æ—Ä—Ç–∞_–ì–ó = –ù–æ–º–µ—Ä_–ø–∞—Å–ø–æ—Ä—Ç–∞_–ü–≠–î, '–°–í–Ø–ó–ê–ù–ù–´–ï_–ö–û–ú–ü–û–ù–ï–ù–¢–´', '–†–ê–ó–ù–´–ï_–ö–û–ú–ü–û–ù–ï–ù–¢–´')\n–°—Ç–∞—Ç—É—Å_–ø—Ä–æ–≤–µ—Ä–∫–∏ = IF(–ü–∞—Å–ø–æ—Ä—Ç–∞_—Å–æ–≤–ø–∞–¥–∞—é—Ç = '–°–í–Ø–ó–ê–ù–ù–´–ï_–ö–û–ú–ü–û–ù–ï–ù–¢–´' OR piece_type IN ('–ü–•–ù–ì', 'NEW', '–ö–ù–ì'), '–í–ê–õ–ò–î–ù–ê–Ø_–°–ë–û–†–ö–ê', '–¢–†–ï–ë–£–ï–¢_–ü–†–û–í–ï–†–ö–ò')",
                dataPreparation: [
                    { action: "–£–±—Ä–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É" },
                    { action: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–æ–≤ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É" }
                ],
                validationChecks: [
                    { check: "–ü–æ–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π" },
                    { check: "–î–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è" }
                ]
            }
        },
        {
            title: "–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ –±–æ–ª—å—à–µ –¥–∞—Ç—ã —Ä–∞–∑–±–æ—Ä–∫–∏",
            description: "–ù–∞—Ä—É—à–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–µ–º–æ–Ω—Ç–∞",
            data: {
                ruleName: "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç-—Ä–∞–∑–±–æ—Ä–∫–∞",
                problem: "–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ –±–æ–ª—å—à–µ –¥–∞—Ç—ã —Ä–∞–∑–±–æ—Ä–∫–∏ - –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏ –¥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                priority: 90,
                conditionMode: "all",
                conditions: [
                    { field: "–î–∞–Ω–Ω—ã–µ.–î–∞—Ç–∞_–ø–µ—Ä–≤–æ–≥–æ_—Ç–µ—Å—Ç–∞", check: "after", value: "–î–∞–Ω–Ω—ã–µ.–î–∞—Ç–∞_—Ä–∞–∑–±–æ—Ä–∫–∏" },
                    { field: "–î–∞–Ω–Ω—ã–µ.–î–∞—Ç–∞_—Ä–∞–∑–±–æ—Ä–∫–∏", check: "not_empty", value: "" }
                ],
                mainAction: "calculate",
                actionDetails: "–í–µ—Ä–Ω–∞—è_–¥–∞—Ç–∞_—Ä–∞–∑–±–æ—Ä–∫–∏ = –î–∞—Ç–∞_–ø–µ—Ä–≤–æ–≥–æ_—Ç–µ—Å—Ç–∞ + 1 —á–∞—Å\n–î–∞—Ç–∞_—Å–±–æ—Ä–∫–∏_–¥–æ–±–∞–≤–ª—è–µ–º_—á–∞—Å_–∫_–Ω–æ–≤–æ–π_–¥–∞—Ç–µ_—Ä–∞–∑–±–æ—Ä–∫–∏ = –í–µ—Ä–Ω–∞—è_–¥–∞—Ç–∞_—Ä–∞–∑–±–æ—Ä–∫–∏ + 1 —á–∞—Å\n–î–∞—Ç–∞_—Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ_—Ç–µ—Å—Ç–∞_–¥–æ–±–∞–≤–ª—è–µ–º_—á–∞—Å_–∫_–Ω–æ–≤–æ–π_–¥–∞—Ç–µ_—Å–±–æ—Ä–∫–∏ = –î–∞—Ç–∞_—Å–±–æ—Ä–∫–∏_–¥–æ–±–∞–≤–ª—è–µ–º_—á–∞—Å_–∫_–Ω–æ–≤–æ–π_–¥–∞—Ç–µ_—Ä–∞–∑–±–æ—Ä–∫–∏ + 1 —á–∞—Å",
                dataPreparation: [
                    { action: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ä–∞–∑–±–æ—Ä–∫–æ–π –∏ —Ç–µ—Å—Ç–æ–º" },
                    { action: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–∞—Ç–æ–π —Ä–∞–∑–±–æ—Ä–∫–∏ –∏ –î–∞—Ç–æ–π WO" }
                ],
                validationChecks: [
                    { check: "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç ‚Üí —Ä–∞–∑–±–æ—Ä–∫–∞ ‚Üí —Å–±–æ—Ä–∫–∞ ‚Üí —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç" },
                    { check: "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ - 1 —á–∞—Å" }
                ]
            }
        },
        {
            title: "–î–∞—Ç–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã —Å–±–æ—Ä–∫–∏",
            description: "–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏",
            data: {
                ruleName: "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ—Ä—Å–∏–∏ —Å–±–æ—Ä–∫–∞-—Ç–µ—Å—Ç",
                problem: "–î–∞—Ç–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ–Ω—å—à–µ –¥–∞—Ç—ã —Å–±–æ—Ä–∫–∏ –∏–ª–∏ —Ä–∞–∑–±–æ—Ä–∫–∏ - –Ω–∞—Ä—É—à–µ–Ω–∞ –ª–æ–≥–∏–∫–∞",
                priority: 95,
                conditionMode: "any",
                conditions: [
                    { field: "–î–∞–Ω–Ω—ã–µ.–¥–∞—Ç–∞_—Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ_—Ç–µ—Å—Ç–∞", check: "before", value: "–î–∞–Ω–Ω—ã–µ.–î–∞—Ç–∞_—Å–±–æ—Ä–∫–∏" },
                    { field: "–î–∞–Ω–Ω—ã–µ.–¥–∞—Ç–∞_—Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ_—Ç–µ—Å—Ç–∞", check: "before", value: "–î–∞–Ω–Ω—ã–µ.–î–∞—Ç–∞_—Ä–∞–∑–±–æ—Ä–∫–∏" }
                ],
                mainAction: "calculate",
                actionDetails: "–ù–æ–≤–∞—è_–¥–∞—Ç–∞_–ø–µ—Ä–≤–æ–≥–æ_—Ç–µ—Å—Ç–∞ = MIN(–î–∞—Ç–∞_–ø—Ä–∏—Ö–æ–¥–∞, –î–∞—Ç–∞_–ø–µ—Ä–≤–æ–≥–æ_—Ç–µ—Å—Ç–∞) + 1 —á–∞—Å\n–ù–æ–≤–∞—è_–¥–∞—Ç–∞_—Ä–∞–∑–±–æ—Ä–∫–∏ = –ù–æ–≤–∞—è_–¥–∞—Ç–∞_–ø–µ—Ä–≤–æ–≥–æ_—Ç–µ—Å—Ç–∞ + 1 —á–∞—Å\n–ù–æ–≤–∞—è_–¥–∞—Ç–∞_—Å–±–æ—Ä–∫–∏ = –ù–æ–≤–∞—è_–¥–∞—Ç–∞_—Ä–∞–∑–±–æ—Ä–∫–∏ + 1 —á–∞—Å\n–ù–æ–≤–∞—è_–¥–∞—Ç–∞_—Ñ–∏–Ω_—Ç–µ—Å—Ç–∞ = –ù–æ–≤–∞—è_–¥–∞—Ç–∞_—Å–±–æ—Ä–∫–∏ + 1 —á–∞—Å",
                dataPreparation: [
                    { action: "–ü—Ä–∏–≤–µ—Å—Ç–∏ –≤—Å–µ –¥–∞—Ç—ã –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏" },
                    { action: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ñ–∏–Ω —Ç–µ—Å—Ç–æ–º –∏ —Ä–∞—Å—Ö–æ–¥–∫–æ–π" }
                ],
                validationChecks: [
                    { check: "–í—Å–µ –Ω–æ–≤—ã–µ –¥–∞—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å" },
                    { check: "–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π" }
                ]
            }
        },
        {
            title: "–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏ —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –ø—Ä–∏—Ö–æ–¥–∞",
            description: "–°–æ–±—Ä–∞–ª–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–æ –µ–≥–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ –±–∞–∑—É",
            data: {
                ruleName: "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–∞—Ç—ã —Å–±–æ—Ä–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Ö–æ–¥–∞",
                problem: "–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏ –º–µ–Ω—å—à–µ –¥–∞—Ç—ã –ø—Ä–∏—Ö–æ–¥–∞ –∏–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è",
                priority: 90,
                conditionMode: "any",
                conditions: [
                    { field: "–î–∞–Ω–Ω—ã–µ.–î–∞—Ç–∞_—Å–±–æ—Ä–∫–∏", check: "before", value: "–î–∞–Ω–Ω—ã–µ.–î–∞—Ç–∞_–ø—Ä–∏—Ö–æ–¥–∞" },
                    { field: "–î–∞–Ω–Ω—ã–µ.–î–∞—Ç–∞_—Å–±–æ—Ä–∫–∏", check: "before", value: "–î–∞–Ω–Ω—ã–µ.–î–∞—Ç–∞_–ø–µ—Ä–≤–æ–≥–æ_—Ç–µ—Å—Ç–∞" }
                ],
                mainAction: "calculate",
                actionDetails: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è_–Ω–∞—á–∞–ª—å–Ω–∞—è_–¥–∞—Ç–∞ = GREATEST(–î–∞—Ç–∞_–ø—Ä–∏—Ö–æ–¥–∞, –î–∞—Ç–∞_–ø–µ—Ä–≤–æ–≥–æ_—Ç–µ—Å—Ç–∞)\n–ù–æ–≤–∞—è_–¥–∞—Ç–∞_—Å–±–æ—Ä–∫–∏ = –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è_–Ω–∞—á–∞–ª—å–Ω–∞—è_–¥–∞—Ç–∞ + 2 —á–∞—Å–∞\n–ù–æ–≤–∞—è_–¥–∞—Ç–∞_—Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ_—Ç–µ—Å—Ç–∞ = –ù–æ–≤–∞—è_–¥–∞—Ç–∞_—Å–±–æ—Ä–∫–∏ + 1 —á–∞—Å",
                dataPreparation: [
                    { action: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç" },
                    { action: "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–π" }
                ],
                validationChecks: [
                    { check: "–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å–ª–µ –ø—Ä–∏—Ö–æ–¥–∞ –∏ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞" },
                    { check: "–°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π" }
                ]
            }
        },
        {
            title: "–î–∞—Ç–∞ —Ä–∞–∑–±–æ—Ä–∫–∏ –±–æ–ª—å—à–µ –¥–∞—Ç—ã —Å–±–æ—Ä–∫–∏",
            description: "–†–∞–∑–±–æ—Ä–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏",
            data: {
                ruleName: "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ—Ä—Å–∏–∏ —Ä–∞–∑–±–æ—Ä–∫–∞-—Å–±–æ—Ä–∫–∞",
                problem: "–î–∞—Ç–∞ —Ä–∞–∑–±–æ—Ä–∫–∏ –±–æ–ª—å—à–µ –¥–∞—Ç—ã —Å–±–æ—Ä–∫–∏ - –Ω–∞—Ä—É—à–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π",
                priority: 85,
                conditionMode: "all",
                conditions: [
                    { field: "–î–∞–Ω–Ω—ã–µ.–î–∞—Ç–∞_—Ä–∞–∑–±–æ—Ä–∫–∏", check: "after", value: "–î–∞–Ω–Ω—ã–µ.–î–∞—Ç–∞_—Å–±–æ—Ä–∫–∏" },
                    { field: "–î–∞–Ω–Ω—ã–µ.—Ä–∞–∑–Ω–∏—Ü–∞_–º–µ–∂–¥—É_–¥–∞—Ç–æ–π_—Å–±–æ—Ä–∫–∏_–∏_—Ä–∞–∑–±–æ—Ä–∫–∏", check: "less_than", value: "0" }
                ],
                mainAction: "calculate",
                actionDetails: "—Ä–∞–∑–Ω–∏—Ü–∞_–º–µ–∂–¥—É_–¥–∞—Ç–æ–π_—Å–±–æ—Ä–∫–∏_–∏_—Ä–∞–∑–±–æ—Ä–∫–∏ = DATEDIFF(–î–∞—Ç–∞_—Å–±–æ—Ä–∫–∏, –î–∞—Ç–∞_—Ä–∞–∑–±–æ—Ä–∫–∏)\n–ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ < 0: SWAP(–î–∞—Ç–∞_—Ä–∞–∑–±–æ—Ä–∫–∏, –î–∞—Ç–∞_—Å–±–æ—Ä–∫–∏)\n–ü–æ–º–µ—Ç–∏—Ç—å_–∏–Ω–≤–µ—Ä—Å–∏—é = IF(—Ä–∞–∑–Ω–∏—Ü–∞ < 0, '–î–ê–¢–´_–ü–ï–†–ï–ü–£–¢–ê–ù–´', 'OK')",
                dataPreparation: [
                    { action: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–∞—Ç–æ–π —Å–±–æ—Ä–∫–∏ –∏ —Ä–∞–∑–±–æ—Ä–∫–∏ –≤ –¥–Ω—è—Ö" },
                    { action: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –¥–∞—Ç" }
                ],
                validationChecks: [
                    { check: "–†–∞–∑–±–æ—Ä–∫–∞ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –î–û —Å–±–æ—Ä–∫–∏" },
                    { check: "–†–∞–∑–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π (–º–∏–Ω–∏–º—É–º 1 —á–∞—Å)" }
                ]
            }
        },
        {
            title: "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–≤–∞–∂–¥—ã –ø–æ –æ–¥–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π",
            description: "–î—É–±–ª–∏–∫–∞—Ç—ã –∑–∞–ø–∏—Å–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–∞–∫–ª–∞–¥–Ω–æ–π",
            data: {
                ruleName: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –Ω–∞–∫–ª–∞–¥–Ω—ã–º",
                problem: "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–≤–∞–∂–¥—ã –ø—Ä–∏—à–µ–¥—à–µ–µ –ø–æ –æ–¥–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è",
                priority: 80,
                conditionMode: "all",
                conditions: [
                    { field: "–î–∞–Ω–Ω—ã–µ.rec_doc_num", check: "duplicate", value: "" },
                    { field: "–î–∞–Ω–Ω—ã–µ.piece_type", check: "not_empty", value: "" }
                ],
                mainAction: "mark_error",
                actionDetails: "–ù–∞_—É–¥–∞–ª–µ–Ω–∏–µ_—Å_—Ü–∏—Ñ—Ä–æ–π_1 = IF(ROW_NUMBER() OVER (PARTITION BY rec_doc_num ORDER BY timestamp_obmen DESC) > 1, 1, 0)\n–°—Ç–∞—Ç—É—Å_–¥—É–±–ª—è = CASE WHEN –ù–∞_—É–¥–∞–ª–µ–Ω–∏–µ_—Å_—Ü–∏—Ñ—Ä–æ–π_1 = 1 THEN '–î–£–ë–õ–¨_–£–î–ê–õ–ò–¢–¨' ELSE '–û–†–ò–ì–ò–ù–ê–õ' END",
                dataPreparation: [
                    { action: "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ rec_doc_num –∏ timestamp_obmen DESC" },
                    { action: "–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ rec_doc_num" }
                ],
                validationChecks: [
                    { check: "–ü–æ –∫–∞–∂–¥–æ–º—É rec_doc_num –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å" },
                    { check: "–ü–æ–º–µ—á–µ–Ω–Ω—ã–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã" }
                ],
                duplicateKeys: "rec_doc_num",
                duplicateStrategy: "keep_latest"
            }
        },
        {
            title: "–†–∞–∑–ª–∏—á–∞—é—Ç—Å—è –Ω–æ–º–µ—Ä–∞ –ö–õ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö",
            description: "–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏ —É—á–µ—Ç–∞",
            data: {
                ruleName: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ –ö–õ",
                problem: "–ù–æ–º–µ—Ä–∞ –ö–õ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è –º–µ–∂–¥—É '–ü–µ—Ä–µ—á–Ω–µ–º –Ω–æ–≤—ã—Ö' –∏ '01 –†–µ–º–æ–Ω—Ç—ã'",
                priority: 70,
                conditionMode: "all",
                conditions: [
                    { field: "–î–∞–Ω–Ω—ã–µ.‚Ññ_–ö–õ_–∏–∑_–ü–µ—Ä–µ—á–Ω—è", check: "not_equals", value: "–î–∞–Ω–Ω—ã–µ.‚Ññ_–ö–õ_–∏–∑_01_–†–µ–º–æ–Ω—Ç—ã" },
                    { field: "–î–∞–Ω–Ω—ã–µ.‚Ññ_—Ä–µ–º–∫–∞—Ä—Ç—ã", check: "not_empty", value: "" }
                ],
                mainAction: "replace",
                actionDetails: "–û—Å–Ω–æ–≤–Ω–æ–π_–Ω–æ–º–µ—Ä_–ö–õ = COALESCE(‚Ññ_–ö–õ_–∏–∑_01_–†–µ–º–æ–Ω—Ç—ã, ‚Ññ_–ö–õ_–∏–∑_–ü–µ—Ä–µ—á–Ω—è)\nrec_serial_–≤—Ö–æ–¥—è—â–∏–π_–Ω–æ–º–µ—Ä = PARSE_SERIAL(–û—Å–Ω–æ–≤–Ω–æ–π_–Ω–æ–º–µ—Ä_–ö–õ, 'incoming')\nissued_serial_–∏—Å—Ö–æ–¥—è—â–∏–π_–Ω–æ–º–µ—Ä = PARSE_SERIAL(–û—Å–Ω–æ–≤–Ω–æ–π_–Ω–æ–º–µ—Ä_–ö–õ, 'outgoing')\n‚Ññ_–û–° = LOOKUP(wo_num, 'inventory_number')",
                dataPreparation: [
                    { action: "–°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑ –ü–µ—Ä–µ—á–Ω—è –Ω–æ–≤—ã—Ö –∏ 01 –†–µ–º–æ–Ω—Ç—ã" },
                    { action: "–ò–∑–≤–ª–µ—á—å wo_num –∏–∑ –Ω–æ–º–µ—Ä–∞ —Ä–µ–º–∫–∞—Ä—Ç—ã –¥–ª—è —Å–≤—è–∑–∏" }
                ],
                validationChecks: [
                    { check: "–û—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–º–µ—Ä –ö–õ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π" },
                    { check: "–°–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã" }
                ]
            }
        },
        {
            title: "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–≤—à–∏–µ—Å—è –∑–∞–≤–æ–¥—ã-–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª–∏",
            description: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π",
            data: {
                ruleName: "–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
                problem: "–†–∞–∑–Ω—ã–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è (–Æ–∂–≥–∏–¥—Ä–æ–º–∞—à-–ê—Ä—Å–µ–Ω–∞–ª vs –û–û–û –Æ–ñ–ì–ò–î–†–û–ú–ê–®)",
                priority: 60,
                conditionMode: "any",
                conditions: [
                    { field: "–î–∞–Ω–Ω—ã–µ.manufactor", check: "contains", value: "–Æ–∂–≥–∏–¥—Ä–æ–º–∞—à" },
                    { field: "–î–∞–Ω–Ω—ã–µ.manufactor", check: "in_list", value: "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–≤—à–µ–µ—Å—è,–ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–≤—à–∏–µ—Å—è –∑–∞–≤–æ–¥—ã" },
                    { field: "–î–∞–Ω–Ω—ã–µ.manufactor", check: "empty", value: "" }
                ],
                mainAction: "normalize",
                actionDetails: "–ü–æ–ª–Ω–æ–µ_–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ = MAP_MANUFACTURER(manufactor, 'full_name')\n–ö—Ä–∞—Ç–∫–æ–µ_–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ = MAP_MANUFACTURER(manufactor, 'short_name')\n–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π_–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å = CASE WHEN manufactor LIKE '%–Æ–∂–≥–∏–¥—Ä–æ–º–∞—à%' THEN '–û–û–û \"–Æ–ñ–ì–ò–î–†–û–ú–ê–®\"' ELSE LOOKUP_MANUFACTURER(manufactor) END",
                dataPreparation: [
                    { action: "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π" },
                    { action: "–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞–ø–∏—Å–∞–Ω–∏–π" }
                ],
                validationChecks: [
                    { check: "–í—Å–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞" },
                    { check: "–ù–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –∑–∞–ø–∏—Å–µ–π —Å '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–≤—à–µ–µ—Å—è'" }
                ]
            }
        }
    ];

    return (
        <div className="examples-panel">
            {/* –¢–∏–ø–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –£–≠–¶–ù */}
            <div className="accordion-section">
                <div 
                    className="accordion-header"
                    onClick={() => setTypicalRulesExpanded(!typicalRulesExpanded)}
                >
                    <h3>
                        <span className={`accordion-toggle ${typicalRulesExpanded ? 'expanded' : ''}`}>‚ñ∂</span>
                        üìö –¢–∏–ø–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –£–≠–¶–ù
                    </h3>
                </div>
                {typicalRulesExpanded && (
                    <div className="accordion-content">
                        <p>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–æ—Ä–º—É</p>
                        <div className="examples-grid">
                            {examples.map(example => (
                                <ExampleCard
                                    key={example.data.ruleName}
                                    title={example.title}
                                    description={example.description}
                                    onClick={() => onLoadExample(example.data)}
                                />
                            ))}
                        </div>
                    </div>
                )}
            </div>

            {/* –ü—Ä–æ–¥–µ–ª–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ */}
            <div className="accordion-section">
                <div 
                    className="accordion-header"
                    onClick={() => setHistoricalWorkExpanded(!historicalWorkExpanded)}
                >
                    <h3>
                        <span className={`accordion-toggle ${historicalWorkExpanded ? 'expanded' : ''}`}>‚ñ∂</span>
                        üìú –ü—Ä–æ–¥–µ–ª–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞
                    </h3>
                </div>
                {historicalWorkExpanded && (
                    <div className="accordion-content">
                        {isLoadingHistorical ? (
                            <div className="loading-state">–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...</div>
                        ) : historicalData ? (
                            <HistoricalWork 
                                historicalData={historicalData}
                                onUpdate={handleHistoricalDataUpdate}
                                onLoadRules={handleLoadRules}
                            />
                        ) : (
                            <div className="no-data-state">
                                <p>–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                                <button 
                                    className="btn btn-secondary"
                                    onClick={loadHistoricalData}
                                >
                                    –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
                                </button>
                            </div>
                        )}
                    </div>
                )}
            </div>
        </div>
    );
};

export default ExamplesPanel; 