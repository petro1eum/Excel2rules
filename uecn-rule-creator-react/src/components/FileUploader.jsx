import { useRef, useState } from 'react';

const SheetItem = ({ fileId, sheetName, sheetInfo, onToggleSheet, onUpdateSheetAlias, onToggleFields }) => {
    const [showFields, setShowFields] = useState(false);
    
    const handleToggleFields = () => {
        setShowFields(!showFields);
        onToggleFields?.(fileId, sheetName, !showFields);
    };

    return (
        <div className={`sheet-item ${sheetInfo.selected ? 'selected' : ''}`}>
            <div className="sheet-main-row">
                <button 
                    className={`sheet-toggle-fields ${showFields ? 'expanded' : ''}`}
                    onClick={handleToggleFields}
                    title="–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–æ–ª—è"
                >
                    {showFields ? '‚ñº' : '‚ñ∂'}
                </button>
                <div className="sheet-name" title={sheetName}>{sheetName}</div>
                <div className="sheet-fields-count">
                    {sheetInfo.fieldsCount} –ø–æ–ª–µ–π
                    {sheetInfo.rowCount && (
                        <span style={{ marginLeft: '8px', color: '#666', fontSize: '0.8rem' }}>
                            ({sheetInfo.rowCount} –∑–∞–ø–∏—Å–µ–π)
                        </span>
                    )}
                </div>
                <input 
                    type="checkbox" 
                    className="sheet-checkbox"
                    checked={sheetInfo.selected}
                    onChange={(e) => onToggleSheet(fileId, sheetName, e.target.checked)}
                />
            </div>
            <div className={`sheet-fields-preview ${showFields ? 'show' : ''}`}>
                {sheetInfo.fields.slice(0, 5).map(field => (
                    <span key={field} className="sheet-field-item">{field}</span>
                ))}
                {sheetInfo.fields.length > 5 && (
                    <span style={{color: '#888', fontStyle: 'italic'}}>
                        ...–∏ –µ—â–µ {sheetInfo.fields.length - 5} –ø–æ–ª–µ–π
                    </span>
                )}
            </div>
            <div className="sheet-alias-row">
                <label>–ê–ª–∏–∞—Å:</label>
                <input 
                    type="text" 
                    value={sheetInfo.alias}
                    onChange={(e) => onUpdateSheetAlias(fileId, sheetName, e.target.value)}
                    placeholder="–ò–º—è –ª–∏—Å—Ç–∞"
                    disabled={!sheetInfo.selected}
                />
            </div>
        </div>
    );
};

const FileItem = ({ fileId, fileInfo, onUpdateFileAlias, onRemoveFile, onShowDebugInfo, onToggleSheet, onSelectAllSheets, onSelectNoSheets, onUpdateSheetAlias }) => {
    const selectedSheets = Object.values(fileInfo.sheets).filter(sheet => sheet.selected);
    const selectedCount = selectedSheets.length;
    const totalSheets = Object.keys(fileInfo.sheets).length;

    return (
        <div className="file-item">
            <div className="file-item-info">
                <span className="file-icon">{fileInfo.isMdbFile ? 'üóÑÔ∏è' : 'üìÑ'}</span>
                <div style={{ flex: 1 }}>
                    <div className="file-name">
                        {fileInfo.name}
                        {fileInfo.isMdbFile && (
                            <span style={{ 
                                marginLeft: '8px', 
                                background: 'linear-gradient(45deg, #8B4513, #CD853F)',
                                color: '#fff',
                                padding: '2px 6px',
                                borderRadius: '4px',
                                fontSize: '0.7rem',
                                fontWeight: 'bold'
                            }}>
                                ACCESS DB
                            </span>
                        )}
                    </div>
                    <div className="fields-count">
                        {fileInfo.isMdbFile ? 
                            `–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${totalSheets} —Ç–∞–±–ª–∏—Ü, –≤—ã–±—Ä–∞–Ω–æ: ${selectedCount}` :
                            (fileInfo.hasMultipleSheets ? 
                                `${totalSheets} –ª–∏—Å—Ç–æ–≤, –≤—ã–±—Ä–∞–Ω–æ: ${selectedCount}` : 
                                `${fileInfo.totalFields} –ø–æ–ª–µ–π`)}
                    </div>
                    {fileInfo.exportDate && (
                        <div style={{ fontSize: '0.75rem', color: '#888', marginTop: '2px' }}>
                            –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {new Date(fileInfo.exportDate).toLocaleString('ru-RU')}
                        </div>
                    )}
                </div>
                <div className="file-alias">
                    <label style={{ fontSize: '0.9rem', color: '#666' }}>–ê–ª–∏–∞—Å:</label>
                    <input 
                        type="text" 
                        value={fileInfo.alias}
                        onChange={(e) => onUpdateFileAlias(fileId, e.target.value)}
                        placeholder="–ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è"
                    />
                </div>
            </div>
            <div className="file-actions">
                <button 
                    className="btn-mini" 
                    onClick={() => onShowDebugInfo(fileId)} 
                    title="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞"
                >
                    üîç
                </button>
                <button 
                    className="file-remove-btn" 
                    onClick={() => onRemoveFile(fileId)}
                >
                    –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
            
            <div className="sheet-selection">
                {fileInfo.hasMultipleSheets ? (
                    <div className="sheets-header">
                        <span>{fileInfo.isMdbFile ? 'üóÑÔ∏è –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:' : 'üìã –õ–∏—Å—Ç—ã —Ñ–∞–π–ª–∞:'}</span>
                        <div className="sheets-actions">
                            <button className="btn-mini" onClick={() => onSelectAllSheets(fileId)}>
                                –í—ã–±—Ä–∞—Ç—å –≤—Å–µ
                            </button>
                            <button className="btn-mini" onClick={() => onSelectNoSheets(fileId)}>
                                –°–Ω—è—Ç—å –≤—Å–µ
                            </button>
                        </div>
                    </div>
                ) : (
                    <div className="sheets-header">
                        <span>{fileInfo.isMdbFile ? 'üóÑÔ∏è –¢–∞–±–ª–∏—Ü–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:' : 'üìã –õ–∏—Å—Ç —Ñ–∞–π–ª–∞:'}</span>
                    </div>
                )}
                {Object.entries(fileInfo.sheets).map(([sheetName, sheetInfo]) => (
                    <SheetItem
                        key={sheetName}
                        fileId={fileId}
                        sheetName={sheetName}
                        sheetInfo={sheetInfo}
                        onToggleSheet={onToggleSheet}
                        onUpdateSheetAlias={onUpdateSheetAlias}
                    />
                ))}
            </div>
        </div>
    );
};

const FileUploader = ({ 
    loadedFiles, 
    onFileUpload,
    onUpdateFileAlias,
    onRemoveFile,
    onShowDebugInfo,
    onToggleSheet,
    onSelectAllSheets,
    onSelectNoSheets,
    onUpdateSheetAlias
}) => {
    const fileInputRef = useRef(null);
    const [isDragOver, setIsDragOver] = useState(false);

    const handleClick = () => {
        fileInputRef.current?.click();
    };

    const handleFileChange = (e) => {
        const files = e.target.files;
        if (files && files.length > 0) {
            onFileUpload(files);
        }
    };

    const handleDragOver = (e) => {
        e.preventDefault();
        setIsDragOver(true);
    };

    const handleDragLeave = () => {
        setIsDragOver(false);
    };

    const handleDrop = (e) => {
        e.preventDefault();
        setIsDragOver(false);
        const files = e.dataTransfer.files;
        if (files && files.length > 0) {
            onFileUpload(files);
        }
    };

    const hasFiles = Object.keys(loadedFiles).length > 0;

    return (
        <div className="card" style={{ marginBottom: '30px' }}>
            <h2 className="section-title">üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h2>
            <div 
                className={`file-upload-area ${isDragOver ? 'drag-over' : ''}`}
                onClick={handleClick}
                onDragOver={handleDragOver}
                onDragLeave={handleDragLeave}
                onDrop={handleDrop}
            >
                <input 
                    ref={fileInputRef}
                    type="file" 
                    accept=".xlsx,.xls,.mdb,.accdb" 
                    multiple 
                    style={{ display: 'none' }}
                    onChange={handleFileChange}
                />
                <div style={{ fontSize: '2.5rem', marginBottom: '10px' }}>üìÅ</div>
                <p style={{ marginBottom: '10px', fontWeight: 500 }}>
                    –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ Excel –∏–ª–∏ Access —Ñ–∞–π–ª—ã —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞
                </p>
                <p style={{ fontSize: '0.85rem', color: '#666' }}>
                    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: Excel (.xlsx, .xls), Access (.mdb, .accdb)
                </p>
                <p style={{ fontSize: '0.85rem', color: '#888', marginTop: '8px' }}>
                    ‚ú® –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã - –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ –ª–∏—Å—Ç—ã
                </p>
            </div>
            

            
            {hasFiles && (
                <div className="files-list" style={{ display: 'block' }}>
                    <h3 style={{ marginBottom: '15px', color: '#1976d2' }}>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</h3>
                    <div>
                        {Object.entries(loadedFiles).map(([fileId, fileInfo]) => (
                            <FileItem
                                key={fileId}
                                fileId={fileId}
                                fileInfo={fileInfo}
                                onUpdateFileAlias={onUpdateFileAlias}
                                onRemoveFile={onRemoveFile}
                                onShowDebugInfo={onShowDebugInfo}
                                onToggleSheet={onToggleSheet}
                                onSelectAllSheets={onSelectAllSheets}
                                onSelectNoSheets={onSelectNoSheets}
                                onUpdateSheetAlias={onUpdateSheetAlias}
                            />
                        ))}
                    </div>
                    <p style={{ marginTop: '15px', fontSize: '0.85rem', color: '#666' }}>
                        üí° –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–º–µ–Ω–∞ (–∞–ª–∏–∞—Å—ã) –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—è–º–∏. 
                        –ù–∞–ø—Ä–∏–º–µ—Ä: <span className="field-reference">–ö–∞—Ç–∞–ª–æ–≥.–ú–æ–¥–µ–ª—å</span> –∏–ª–∏ <span className="field-reference">–î–∞–Ω–Ω—ã–µ.–î–∞—Ç–∞_–ø—Ä–∏—Ö–æ–¥–∞</span>
                    </p>
                    <p style={{ marginTop: '10px', fontSize: '0.85rem', color: '#666' }}>
                        üìã –ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã: –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ –ª–∏—Å—Ç—ã –∏ –∑–∞–¥–∞—Ç—å –∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∞–ª–∏–∞—Å—ã. 
                        –ù–∞–ø—Ä–∏–º–µ—Ä: <span className="field-reference">–ü—Ä–∞–π—Å_–û—Å–Ω–æ–≤–Ω–æ–π.–¶–µ–Ω–∞</span> –∏ <span className="field-reference">–ü—Ä–∞–π—Å_–°–∫–∏–¥–∫–∏.–ü—Ä–æ—Ü–µ–Ω—Ç</span>
                    </p>
                </div>
            )}
        </div>
    );
};

export default FileUploader; 