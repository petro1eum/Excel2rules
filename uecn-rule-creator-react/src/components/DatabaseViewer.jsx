import React, { useState, useEffect } from 'react';

const DatabaseViewer = () => {
  const [metadata, setMetadata] = useState(null);
  const [selectedTable, setSelectedTable] = useState(null);
  const [tableData, setTableData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(50);

  useEffect(() => {
    loadMetadata();
  }, []);

  const loadMetadata = async () => {
    try {
      const response = await fetch('/data/exported/metadata.json');
      const data = await response.json();
      setMetadata(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error);
    }
  };

  const loadTableData = async (tableName) => {
    setLoading(true);
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –∏–º—è —Ñ–∞–π–ª–∞ —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç Python —Å–∫—Ä–∏–ø—Ç
      const fileName = tableName
        .replace(/\s+/g, '_')
        .replace(/\//g, '_')
        .replace(/‚Ññ/g, 'num')
        .replace(/"/g, '"')  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–≤—ã—á–∫–∏ –∫–∞–∫ –µ—Å—Ç—å
        .replace(/\?/g, '_')
        .replace(/:/g, '_')
        .replace(/\*/g, '_')
        .replace(/</g, '_')
        .replace(/>/g, '_')
        .replace(/\|/g, '_');
      
      const response = await fetch(`/data/exported/${fileName}.json`);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      const data = await response.json();
      setTableData(data);
      setSelectedTable(tableName);
      setCurrentPage(1);
      setSearchTerm('');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã:', error);
      alert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã "${tableName}": ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const filteredData = tableData ? tableData.data.filter(row => {
    return Object.values(row).some(value => 
      value && value.toString().toLowerCase().includes(searchTerm.toLowerCase())
    );
  }) : [];

  const paginatedData = filteredData.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const totalPages = Math.ceil(filteredData.length / itemsPerPage);

  const renderTableSelector = () => {
    if (!metadata) return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...</div>;

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Ç–∏–ø–∞–º
    const mainTables = metadata.all_tables.filter(name => 
      name.includes('–†–µ–º–æ–Ω—Ç—ã') || name.includes('—Ä–µ–º–∫–∞—Ä—Ç—ã') || name === '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' || name === '–ó–∞–≤–æ–¥—ã'
    );
    
    const referenceTables = metadata.all_tables.filter(name => 
      name.includes('–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫') || name.includes('–¢–∏–ø—ã') || name.includes('–¢–µ—Ö–Ω–∏–∫–∏')
    );
    
    const reportTables = metadata.all_tables.filter(name => 
      name.includes('–æ—Ç–±—Ä–∞–∫–æ–≤–∫–∞') || name.includes('–û—Ç—á–µ—Ç') || name.includes('–ö–æ–ø–∏—è')
    );
    
    const otherTables = metadata.all_tables.filter(name => 
      !mainTables.includes(name) && !referenceTables.includes(name) && !reportTables.includes(name)
    );

    const renderTableGroup = (title, tables, color) => (
      <div className="table-group" key={title}>
        <h4 style={{ color, marginTop: '15px', marginBottom: '8px' }}>{title}</h4>
        <div className="table-buttons">
          {tables.map(tableName => (
            <button
              key={tableName}
              onClick={() => loadTableData(tableName)}
              className={`table-btn ${selectedTable === tableName ? 'active' : ''}`}
              title={`–°—Ç—Ä–æ–∫: ${metadata.exported_tables[tableName] || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`}
            >
              <span className="table-name">{tableName}</span>
              <span className="table-count">({metadata.exported_tables[tableName] || 0})</span>
            </button>
          ))}
        </div>
      </div>
    );

    return (
      <div className="database-info">
        <h3>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Cable.mdb</h3>
        <div className="db-stats">
          <span>üìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {metadata.total_tables_in_db}</span>
          <span>üìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {Object.keys(metadata.exported_tables).length}</span>
          <span>üìÖ –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {new Date(metadata.export_date).toLocaleString('ru-RU')}</span>
        </div>
        
        {renderTableGroup('üîß –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã', mainTables, '#2563eb')}
        {renderTableGroup('üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏', referenceTables, '#059669')}
        {renderTableGroup('üìä –û—Ç—á–µ—Ç—ã –∏ –∫–æ–ø–∏–∏', reportTables, '#dc2626')}
        {renderTableGroup('üìÅ –ü—Ä–æ—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã', otherTables, '#7c3aed')}
      </div>
    );
  };

  const renderTableData = () => {
    if (!tableData) return null;

    const columns = tableData.data.length > 0 ? Object.keys(tableData.data[0]) : [];

    return (
      <div className="table-viewer">
        <div className="table-header">
          <h4>üìã {tableData.table_name}</h4>
          <div className="table-controls">
            <input
              type="text"
              placeholder="üîç –ü–æ–∏—Å–∫..."
              value={searchTerm}
              onChange={(e) => {
                setSearchTerm(e.target.value);
                setCurrentPage(1);
              }}
              className="search-input"
            />
            <span className="data-info">
              –ü–æ–∫–∞–∑–∞–Ω–æ: {paginatedData.length} –∏–∑ {filteredData.length} –∑–∞–ø–∏—Å–µ–π
            </span>
          </div>
        </div>

        {paginatedData.length > 0 ? (
          <>
            <div className="table-container">
              <table className="data-table">
                <thead>
                  <tr>
                    {columns.map(column => (
                      <th key={column}>{column}</th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  {paginatedData.map((row, index) => (
                    <tr key={index}>
                      {columns.map(column => (
                        <td key={column} title={row[column]}>
                          {row[column] || '‚Äî'}
                        </td>
                      ))}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            {totalPages > 1 && (
              <div className="pagination">
                <button
                  onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                  disabled={currentPage === 1}
                >
                  ‚Üê –ù–∞–∑–∞–¥
                </button>
                <span className="page-info">
                  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {totalPages}
                </span>
                <button
                  onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                  disabled={currentPage === totalPages}
                >
                  –í–ø–µ—Ä–µ–¥ ‚Üí
                </button>
              </div>
            )}
          </>
        ) : (
          <div className="no-data">
            {searchTerm ? `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchTerm}"` : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è'}
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="database-viewer">
      {renderTableSelector()}
      {loading && (
        <div className="loading">
          <div className="loading-spinner"></div>
          –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã...
        </div>
      )}
      {renderTableData()}
    </div>
  );
};

export default DatabaseViewer; 