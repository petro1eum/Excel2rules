import { useState, useEffect } from 'react';
import './styles/App.css';
import { useToast } from './hooks/useToast';
import { useFileManager } from './hooks/useFileManager';
import { useDragDrop } from './hooks/useDragDrop';
import { useRuleGenerator } from './hooks/useRuleGenerator';
import FileUploader from './components/FileUploader';
import ExamplesPanel from './components/ExamplesPanel';
import FieldsPanel from './components/FieldsPanel';

import Toast from './components/Toast';

function App() {
    const [isFieldsPanelOpen, setIsFieldsPanelOpen] = useState(false);
    const [isSimpleMode, setIsSimpleMode] = useState(false);

    const { toast, showToast, hideToast } = useToast();
    
    const {
        loadedFiles,
        availableFields,
        fieldDescriptions,
        handleMultipleFiles,
        updateGlobalFields,
        toggleSheet,
        selectAllSheets,
        selectNoSheets,
        updateSheetAlias,
        updateFileAlias,
        removeFile,
        showFileDebugInfo
    } = useFileManager(showToast);

    const {
        handleFieldDragStart,
        handleFieldDragEnd,
        setupAllDropZones,
        setupDragHelper,
        insertField
    } = useDragDrop(showToast);

    const {
        ruleData,
        dynamicItems,
        generatedRule,
        updateRuleData,
        addDynamicItem,
        removeDynamicItem,
        updateDynamicItem,
        generateRule,
        loadExample,
        copyToClipboard,
        downloadRule,
        testRule,
        resetForm
    } = useRuleGenerator(loadedFiles, showToast);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        const simpleMode = localStorage.getItem('simpleMode') === 'true';
        setIsSimpleMode(simpleMode);
        if (simpleMode) {
            document.body.classList.add('simple-mode');
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop
        const cleanupDropZones = setupAllDropZones();
        const cleanupDragHelper = setupDragHelper();

        return () => {
            cleanupDropZones();
            cleanupDragHelper();
        };
    }, [setupAllDropZones, setupDragHelper]);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤
    useEffect(() => {
        updateGlobalFields();
    }, [loadedFiles]);

    const toggleVisualEffects = () => {
        const newSimpleMode = !isSimpleMode;
        setIsSimpleMode(newSimpleMode);
        
        if (newSimpleMode) {
            document.body.classList.add('simple-mode');
            localStorage.setItem('simpleMode', 'true');
            showToast('–í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã');
        } else {
            document.body.classList.remove('simple-mode');
            localStorage.setItem('simpleMode', 'false');
            showToast('–í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã', 'success');
        }
    };

    const toggleFieldsPanel = () => {
        setIsFieldsPanelOpen(!isFieldsPanelOpen);
    };

    const closeFieldsPanel = () => {
        setIsFieldsPanelOpen(false);
    };

    const updatePriorityValue = (value) => {
        updateRuleData('priority', value);
    };

    const updateActionDetails = (action) => {
        updateRuleData('mainAction', action);
        
        // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        const hints = {
            'fill': '–û—Ç–∫—É–¥–∞ –≤–∑—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ? –ù–∞–ø—Ä–∏–º–µ—Ä: –∏–∑ –ø–æ–ª—è "–ú–æ–¥–µ–ª—å" –∏–ª–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞',
            'replace': '–ù–∞ —á—Ç–æ –∑–∞–º–µ–Ω–∏—Ç—å? –ù–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–º–µ–Ω–∏—Ç—å "–Ω/–¥" –Ω–∞ "–ù–ï–ò–ó–í–ï–°–¢–ù–û"',
            'calculate': '–ö–∞–∫ –≤—ã—á–∏—Å–ª–∏—Ç—å? –ù–∞–ø—Ä–∏–º–µ—Ä: –¥–∞—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∞ + 7 –¥–Ω–µ–π',
            'normalize': '–í –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏? –ù–∞–ø—Ä–∏–º–µ—Ä: –î–î.–ú–ú.–ì–ì–ì–ì –¥–ª—è –¥–∞—Ç',
            'merge_duplicates': '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–∏–∂–µ',
            'mark_error': '–ö–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç—å? –ù–∞–ø—Ä–∏–º–µ—Ä: "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"',
            'delete': '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —É—Å–ª–æ–≤–∏—è–º'
        };
        
        if (!ruleData.actionDetails) {
            updateRuleData('actionDetails', hints[action] || '–û–ø–∏—à–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...');
        }
    };

    const showDuplicateHandling = ruleData.mainAction === 'merge_duplicates';
    const showComplexLogic = ruleData.conditionMode === 'complex';
    const showMergeFields = ruleData.duplicateStrategy === 'merge';

    return (
        <div className="container">
            <div style={{ 
                display: 'flex', 
                justifyContent: 'space-between', 
                alignItems: 'center', 
                marginBottom: '1rem' 
            }}>
                <h1 style={{ margin: 0 }}>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–∞–≤–∏–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –£–≠–¶–ù</h1>
                <button 
                    className="btn btn-secondary" 
                    onClick={toggleVisualEffects}
                    style={{ padding: '8px 16px', fontSize: '0.9rem' }}
                >
                    {isSimpleMode ? '‚ú® –í–∫–ª—é—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã' : 'üé® –û—Ç–∫–ª—é—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã'}
                </button>
            </div>
            <p className="subtitle">–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º - —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö –≤ –∫–æ–¥</p>
            
            {/* –ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–æ–≤ */}
            <div className="file-upload-section">
                <FileUploader
                    loadedFiles={loadedFiles}
                    onFileUpload={handleMultipleFiles}
                    onUpdateFileAlias={updateFileAlias}
                    onRemoveFile={removeFile}
                    onShowDebugInfo={showFileDebugInfo}
                    onToggleSheet={toggleSheet}
                    onSelectAllSheets={selectAllSheets}
                    onSelectNoSheets={selectNoSheets}
                    onUpdateSheetAlias={updateSheetAlias}
                />
            </div>
            
            <div className="main-layout">
                <div className="form-section">
                    {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                    <div className="card">
                        <h2 className="section-title">üìù –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
                        
                        <div className="form-group">
                            <label>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞</label>
                            <input 
                                type="text" 
                                value={ruleData.ruleName}
                                onChange={(e) => updateRuleData('ruleName', e.target.value)}
                                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç —Å–±–æ—Ä–∫–∏"
                            />
                            <p className="help-text">–î–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—É –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å—ã–≤–∞—é—â–µ–µ –µ–≥–æ —Å—É—Ç—å</p>
                        </div>
                        
                        <div className="form-group">
                            <label>–ö–∞–∫—É—é –ø—Ä–æ–±–ª–µ–º—É —Ä–µ—à–∞–µ–º?</label>
                            <textarea 
                                value={ruleData.problem}
                                onChange={(e) => updateRuleData('problem', e.target.value)}
                                placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º..."
                            />
                            <p className="help-text">–ù–∞–ø—Ä–∏–º–µ—Ä: "–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏ —á–∞—Å—Ç–æ —É–∫–∞–∑–∞–Ω–∞ —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –ø—Ä–∏—Ö–æ–¥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"</p>
                        </div>
                        
                        <div className="form-group">
                            <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è <span className="label-hint">(–æ—Ç 1 –¥–æ 100)</span></label>
                            <div className="priority-input">
                                <input 
                                    type="range" 
                                    min="1" 
                                    max="100" 
                                    value={ruleData.priority}
                                    onChange={(e) => updatePriorityValue(e.target.value)}
                                />
                                <span className="priority-value">{ruleData.priority}</span>
                            </div>
                            <p className="help-text">1-30: –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏, 31-60: –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤, 61-100: —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞</p>
                        </div>
                        
                        <div className="form-group">
                            <label>–ü—Ä–∞–≤–∏–ª–æ –∞–∫—Ç–∏–≤–Ω–æ?</label>
                            <label className="toggle-switch">
                                <input 
                                    type="checkbox" 
                                    checked={ruleData.enabled}
                                    onChange={(e) => updateRuleData('enabled', e.target.checked)}
                                />
                                <span className="toggle-slider"></span>
                            </label>
                        </div>
                    </div>
                    
                    {/* –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö */}
                    <div className="card">
                        <h2 className="section-title">üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h2>
                        <p style={{ marginBottom: '15px', color: '#666' }}>–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π?</p>
                        
                        <div>
                            {dynamicItems.dataPreparation.map(item => (
                                <div key={item.id} className="action-item">
                                    <input 
                                        type="text" 
                                        value={item.action || ''}
                                        onChange={(e) => updateDynamicItem('dataPreparation', item.id, 'action', e.target.value)}
                                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —É–±—Ä–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã –∏–∑ –Ω–æ–º–µ—Ä–∞ –ü–ó–î" 
                                        className="data-prep-action"
                                    />
                                    <button 
                                        className="remove-btn" 
                                        onClick={() => removeDynamicItem('dataPreparation', item.id)}
                                    >
                                        √ó
                                    </button>
                                </div>
                            ))}
                        </div>
                        <button 
                            className="btn btn-secondary" 
                            onClick={() => addDynamicItem('dataPreparation')}
                        >
                            + –î–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
                        </button>
                        
                        <div style={{ marginTop: '15px' }}>
                            <p style={{ fontSize: '0.9rem', color: '#777' }}>–ü—Ä–∏–º–µ—Ä—ã –¥–µ–π—Å—Ç–≤–∏–π:</p>
                            <ul style={{ fontSize: '0.85rem', color: '#666', marginLeft: '20px', marginTop: '5px' }}>
                                <li>–£–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏–∑ –Ω–æ–º–µ—Ä–∞ –ü–ó–î</li>
                                <li>–ü—Ä–∏–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É</li>
                                <li>–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É –≤ –ø–æ–ª–µ "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"</li>
                                <li>–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç</li>
                            </ul>
                        </div>
                    </div>
                    
                    {/* –£—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è */}
                    <div className="card">
                        <h2 className="section-title">‚ùì –ö–æ–≥–¥–∞ –ø—Ä–∏–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–æ</h2>
                        
                        <div className="form-group">
                            <label>–†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π</label>
                            <select 
                                value={ruleData.conditionMode}
                                onChange={(e) => updateRuleData('conditionMode', e.target.value)}
                            >
                                <option value="all">–í—Å–µ —É—Å–ª–æ–≤–∏—è –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è</option>
                                <option value="any">–õ—é–±–æ–µ –∏–∑ —É—Å–ª–æ–≤–∏–π</option>
                                <option value="complex">–°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–æ–ø–∏—à—É —Ç–µ–∫—Å—Ç–æ–º)</option>
                            </select>
                        </div>
                        
                        {showComplexLogic && (
                            <div className="form-group">
                                <label>–û–ø–∏—à–∏—Ç–µ –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏</label>
                                <textarea 
                                    value={ruleData.complexLogic}
                                    onChange={(e) => updateRuleData('complexLogic', e.target.value)}
                                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: (—É—Å–ª–æ–≤–∏–µ1 –ò —É—Å–ª–æ–≤–∏–µ2) –ò–õ–ò —É—Å–ª–æ–≤–∏–µ3"
                                />
                            </div>
                        )}
                        
                        <div className="condition-builder">
                            <p style={{ marginBottom: '10px', fontWeight: 500 }}>–£—Å–ª–æ–≤–∏—è:</p>
                            <div style={{
                                background: 'rgba(0, 255, 136, 0.1)',
                                border: '1px solid rgba(0, 255, 136, 0.3)',
                                borderRadius: '6px',
                                padding: '10px',
                                marginBottom: '15px',
                                fontSize: '0.85rem',
                                color: '#00ff88'
                            }}>
                                <strong>üí° –°–æ–≤–µ—Ç:</strong> –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ –ø–æ–ª—è –º—ã—à–∫–æ–π –ø—Ä—è–º–æ –≤ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –∏–ª–∏ –∫–ª–∏–∫–∞–π—Ç–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ
                            </div>
                            <div>
                                {dynamicItems.conditions.map(item => (
                                    <div key={item.id} className="condition-row">
                                        <input 
                                            type="text" 
                                            value={item.field || ''}
                                            onChange={(e) => updateDynamicItem('conditions', item.id, 'field', e.target.value)}
                                            placeholder="–ü–æ–ª–µ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç—å –∏–∑ –ø–∞–Ω–µ–ª–∏)" 
                                            className="condition-field"
                                        />
                                        <select 
                                            value={item.check || 'empty'}
                                            onChange={(e) => updateDynamicItem('conditions', item.id, 'check', e.target.value)}
                                            className="condition-check"
                                        >
                                            <option value="empty">–ø—É—Å—Ç–æ–µ</option>
                                            <option value="not_empty">–Ω–µ –ø—É—Å—Ç–æ–µ</option>
                                            <option value="equals">—Ä–∞–≤–Ω–æ</option>
                                            <option value="not_equals">–Ω–µ —Ä–∞–≤–Ω–æ</option>
                                            <option value="contains">—Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç</option>
                                            <option value="similar_to">–ø–æ—Ö–æ–∂–µ –Ω–∞</option>
                                            <option value="in_list">–≤ —Å–ø–∏—Å–∫–µ</option>
                                            <option value="duplicate">–¥—É–±–ª–∏–∫–∞—Ç</option>
                                            <option value="before">—Ä–∞–Ω—å—à–µ —á–µ–º</option>
                                            <option value="after">–ø–æ–∑–∂–µ —á–µ–º</option>
                                        </select>
                                        <input 
                                            type="text" 
                                            value={item.value || ''}
                                            onChange={(e) => updateDynamicItem('conditions', item.id, 'value', e.target.value)}
                                            placeholder="–ó–Ω–∞—á–µ–Ω–∏–µ (–∏–ª–∏ –ø–æ–ª–µ)" 
                                            className="condition-value"
                                        />
                                        <button 
                                            className="remove-btn" 
                                            onClick={() => removeDynamicItem('conditions', item.id)}
                                        >
                                            √ó
                                        </button>
                                    </div>
                                ))}
                            </div>
                            <button 
                                className="btn btn-secondary" 
                                onClick={() => addDynamicItem('conditions')}
                            >
                                + –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ
                            </button>
                            
                            <div style={{ marginTop: '15px' }}>
                                <p style={{ fontSize: '0.9rem', color: '#777' }}>–ü—Ä–∏–º–µ—Ä—ã —É—Å–ª–æ–≤–∏–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏:</p>
                                <ul style={{ fontSize: '0.85rem', color: '#666', marginLeft: '20px', marginTop: '5px' }}>
                                    <li><strong>–î–∞–Ω–Ω—ã–µ.–ú–æ–¥–µ–ª—å</strong> —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—Ç–∞–ª–æ–≥—É ‚Üí <strong>–ö–∞—Ç–∞–ª–æ–≥.–ú–æ–¥–µ–ª—å</strong></li>
                                    <li><strong>–î–∞–Ω–Ω—ã–µ.–ó–∞–≤–æ–¥</strong> –ø—É—Å—Ç–æ–µ –ò <strong>–î–∞–Ω–Ω—ã–µ.–ú–æ–¥–µ–ª—å</strong> –µ—Å—Ç—å –≤ <strong>–ö–∞—Ç–∞–ª–æ–≥.–ú–æ–¥–µ–ª—å</strong></li>
                                    <li><strong>–î–∞–Ω–Ω—ã–µ.–¶–µ–Ω–∞</strong> –Ω–µ —Ä–∞–≤–Ω–æ <strong>–ü—Ä–∞–π—Å.–¶–µ–Ω–∞</strong> –≥–¥–µ <strong>–ü—Ä–∞–π—Å.–ê—Ä—Ç–∏–∫—É–ª = –î–∞–Ω–Ω—ã–µ.–ê—Ä—Ç–∏–∫—É–ª</strong></li>
                                    <li><strong>–î–∞–Ω–Ω—ã–µ.–°—Ç–∞—Ç—É—Å</strong> –µ—Å—Ç—å –≤ <strong>–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏_–°—Ç–∞—Ç—É—Å—ã.–ö–æ–¥</strong></li>
                                    <li><strong>–ü—Ä–∞–π—Å_–û—Å–Ω–æ–≤–Ω–æ–π.–¶–µ–Ω–∞</strong> –±–æ–ª—å—à–µ <strong>–ü—Ä–∞–π—Å_–°–∫–∏–¥–∫–∏.–¶–µ–Ω–∞_—Å–æ_—Å–∫–∏–¥–∫–æ–π</strong> (–º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Ñ–∞–π–ª)</li>
                                    <li><strong>–ö–∞—Ç–∞–ª–æ–≥_2024.–ú–æ–¥–µ–ª—å</strong> –Ω–µ —Ä–∞–≤–Ω–æ <strong>–ö–∞—Ç–∞–ª–æ–≥_2023.–ú–æ–¥–µ–ª—å</strong> (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ–¥–æ–≤)</li>
                                </ul>
                            </div>
                        </div>
                        
                        <div className="form-group">
                            <label>–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –ø–æ–ª—é <span className="label-hint">(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</span></label>
                            <input 
                                type="text" 
                                value={ruleData.groupBy}
                                onChange={(e) => updateRuleData('groupBy', e.target.value)}
                                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–æ–º–µ—Ä –ü–ó–î (–º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç—å –ø–æ–ª–µ)"
                            />
                            <p className="help-text">–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —É—Å–ª–æ–≤–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –∑–∞–ø–∏—Å–µ–π</p>
                        </div>
                    </div>
                    
                    {/* –ß—Ç–æ –¥–µ–ª–∞—Ç—å */}
                    <div className="card">
                        <h2 className="section-title">‚ö° –ß—Ç–æ –¥–µ–ª–∞—Ç—å</h2>
                        
                        <div className="form-group">
                            <label>–û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ</label>
                            <select 
                                value={ruleData.mainAction}
                                onChange={(e) => updateActionDetails(e.target.value)}
                            >
                                <option value="fill">–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è</option>
                                <option value="replace">–ó–∞–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è</option>
                                <option value="calculate">–í—ã—á–∏—Å–ª–∏—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π</option>
                                <option value="normalize">–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç</option>
                                <option value="merge_duplicates">–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã</option>
                                <option value="mark_error">–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ—à–∏–±–∫—É</option>
                                <option value="delete">–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏</option>
                            </select>
                        </div>
                        
                        <div className="form-group">
                            <label>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ <span className="label-hint">(–æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º)</span></label>
                            <textarea 
                                value={ruleData.actionDetails}
                                onChange={(e) => updateRuleData('actionDetails', e.target.value)}
                                placeholder="–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å... (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π)"
                            />
                            <div className="form-hint">
                                üí° –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –∏–º–µ–Ω–∞ –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ (=, ?, /).<br/>
                                ‚úÖ –•–æ—Ä–æ—à–æ: –ü–∞—Å–ø–æ—Ä—Ç–∞_—Å–æ–≤–ø–∞–¥–∞—é—Ç, –°—Ç–∞—Ç—É—Å_–ø—Ä–æ–≤–µ—Ä–∫–∏, –í–µ—Ä–Ω–∞—è_–¥–∞—Ç–∞_–ø—Ä–∏—Ö–æ–¥–∞<br/>
                                ‚ùå –ü–ª–æ—Ö–æ: –ï—Å–ª–∏_–ø–∞—Å–ø–æ—Ä—Ç_–ì–ó=–ø–∞—Å–ø–æ—Ä—Ç—É_–ü–≠–î, –ø–æ–ª–µ?–ø—Ä–æ–≤–µ—Ä–∫–∏
                            </div>
                        </div>
                        
                        <div className="form-group">
                            <label>–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö?</label>
                            <input 
                                type="text" 
                                value={ruleData.handleConflicts}
                                onChange={(e) => updateRuleData('handleConflicts', e.target.value)}
                                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –≤—ã–±—Ä–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω—é—é –¥–∞—Ç—É (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª—è)"
                            />
                        </div>
                        
                        <div className="form-group">
                            <label>–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö?</label>
                            <select 
                                value={ruleData.handleErrors}
                                onChange={(e) => updateRuleData('handleErrors', e.target.value)}
                            >
                                <option value="skip">–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å</option>
                                <option value="mark">–ü–æ–º–µ—Ç–∏—Ç—å –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏</option>
                                <option value="default">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</option>
                                <option value="stop">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ</option>
                            </select>
                        </div>
                    </div>
                    
                    {/* –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ */}
                    {showDuplicateHandling && (
                        <div className="card">
                            <h2 className="section-title">üë• –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤</h2>
                            
                            <div className="form-group">
                                <label>–ü–æ –∫–∞–∫–∏–º –ø–æ–ª—è–º –∏—Å–∫–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã?</label>
                                <input 
                                    type="text" 
                                    value={ruleData.duplicateKeys}
                                    onChange={(e) => updateRuleData('duplicateKeys', e.target.value)}
                                    placeholder="–§–∞–π–ª.–ü–æ–ª–µ1, –§–∞–π–ª.–ü–æ–ª–µ2, ... (–º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç—å –∏–∑ –ø–∞–Ω–µ–ª–∏)"
                                />
                                <p className="help-text">–ù–∞–ø—Ä–∏–º–µ—Ä: "–î–∞–Ω–Ω—ã–µ.–ù–æ–º–µ—Ä_–ü–ó–î" –∏–ª–∏ "–î–∞–Ω–Ω—ã–µ.–ü–∞—Å–ø–æ—Ä—Ç_–ì–ó, –î–∞–Ω–Ω—ã–µ.–ü–∞—Å–ø–æ—Ä—Ç_–ü–≠–î"</p>
                            </div>
                            
                            <div className="form-group">
                                <label>–°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</label>
                                <select 
                                    value={ruleData.duplicateStrategy}
                                    onChange={(e) => updateRuleData('duplicateStrategy', e.target.value)}
                                >
                                    <option value="keep_first">–û—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å</option>
                                    <option value="keep_last">–û—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å</option>
                                    <option value="keep_most_complete">–û—Å—Ç–∞–≤–∏—Ç—å —Å–∞–º—É—é –ø–æ–ª–Ω—É—é</option>
                                    <option value="merge">–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</option>
                                </select>
                            </div>
                            
                            {showMergeFields && (
                                <div>
                                    <p style={{ margin: '15px 0 10px', fontWeight: 500 }}>–ö–∞–∫ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –ø–æ–ª—è:</p>
                                    <div>
                                        {dynamicItems.mergeFields.map(item => (
                                            <div key={item.id} className="duplicate-strategy">
                                                <input 
                                                    type="text" 
                                                    value={item.field || ''}
                                                    onChange={(e) => updateDynamicItem('mergeFields', item.id, 'field', e.target.value)}
                                                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è (–º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç—å)" 
                                                    className="merge-field-name"
                                                />
                                                <select 
                                                    value={item.strategy || 'min'}
                                                    onChange={(e) => updateDynamicItem('mergeFields', item.id, 'strategy', e.target.value)}
                                                    className="merge-strategy"
                                                >
                                                    <option value="min">–≤–∑—è—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ</option>
                                                    <option value="max">–≤–∑—è—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ</option>
                                                    <option value="first_not_empty">–≤–∑—è—Ç—å –ø–µ—Ä–≤–æ–µ –Ω–µ–ø—É—Å—Ç–æ–µ</option>
                                                    <option value="last_not_empty">–≤–∑—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–µ–ø—É—Å—Ç–æ–µ</option>
                                                    <option value="concatenate">–æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é</option>
                                                    <option value="sum">—Å—É–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏–π</option>
                                                    <option value="average">—Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</option>
                                                </select>
                                            </div>
                                        ))}
                                    </div>
                                    <button 
                                        className="btn btn-secondary" 
                                        onClick={() => addDynamicItem('mergeFields')}
                                    >
                                        + –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ
                                    </button>
                                </div>
                            )}
                        </div>
                    )}
                    
                    {/* –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è */}
                    <div className="card">
                        <h2 className="section-title">‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</h2>
                        
                        <div className="form-group">
                            <label>–ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞?</label>
                            <div>
                                {dynamicItems.validationChecks.map(item => (
                                    <div key={item.id} className="action-item">
                                        <input 
                                            type="text" 
                                            value={item.check || ''}
                                            onChange={(e) => updateDynamicItem('validationChecks', item.id, 'check', e.target.value)}
                                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –ø—Ä–∏—Ö–æ–¥–∞" 
                                            className="validation-check"
                                        />
                                        <button 
                                            className="remove-btn" 
                                            onClick={() => removeDynamicItem('validationChecks', item.id)}
                                        >
                                            √ó
                                        </button>
                                    </div>
                                ))}
                            </div>
                            <button 
                                className="btn btn-secondary" 
                                onClick={() => addDynamicItem('validationChecks')}
                            >
                                + –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
                            </button>
                        </div>
                        <div className="form-group">
                            <label>–ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞:</label>
                            <select 
                                value={ruleData.validationFailAction}
                                onChange={(e) => updateRuleData('validationFailAction', e.target.value)}
                            >
                                <option value="rollback">–û—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</option>
                                <option value="mark_error">–ü–æ–º–µ—Ç–∏—Ç—å –æ—à–∏–±–∫–æ–π</option>
                                <option value="manual_review">–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É</option>
                            </select>
                        </div>
                    </div>
                    
                    {/* –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ */}
                    <div className="card">
                        <h2 className="section-title">üîó –°–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏</h2>
                        
                        <div className="form-group">
                            <label>–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –¥–æ —ç—Ç–æ–≥–æ? <span className="label-hint">(ID –ø—Ä–∞–≤–∏–ª)</span></label>
                            <input 
                                type="text" 
                                value={ruleData.requiresRules}
                                onChange={(e) => updateRuleData('requiresRules', e.target.value)}
                                placeholder="RULE001, RULE002"
                            />
                            <p className="help-text">–≠—Ç–æ –ø—Ä–∞–≤–∏–ª–æ –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª</p>
                        </div>
                        
                        <div className="form-group">
                            <label>–° –∫–∞–∫–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ?</label>
                            <input 
                                type="text" 
                                value={ruleData.blocksRules}
                                onChange={(e) => updateRuleData('blocksRules', e.target.value)}
                                placeholder="RULE003, RULE004"
                            />
                            <p className="help-text">–≠—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ –±—É–¥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ</p>
                        </div>
                    </div>
                </div>
                
                {/* –ü–∞–Ω–µ–ª—å –ø—Ä–∏–º–µ—Ä–æ–≤ */}
                <ExamplesPanel onLoadExample={loadExample} />
            </div>
            

            
            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
            <div className="output-section">
                <div className="card">
                    <h2 className="section-title">üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ</h2>
                    <pre className="json-output">{generatedRule}</pre>
                </div>
            </div>
            
            <div className="action-buttons">
                <button className="btn btn-primary" onClick={generateRule}>üöÄ –°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ</button>
                <button className="btn btn-secondary" onClick={copyToClipboard}>üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å JSON</button>
                <button className="btn btn-secondary" onClick={downloadRule}>üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª</button>
                <button className="btn btn-success" onClick={testRule}>üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫</button>
                <button className="btn btn-danger" onClick={resetForm}>üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É</button>
            </div>
            
            {/* Toast */}
            <Toast message={toast.message} type={toast.type} show={toast.show} onClose={hideToast} />
            
            {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –ø–æ–ª–µ–π */}
            <button 
                className="toggle-fields-btn" 
                onClick={toggleFieldsPanel}
                title="–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è"
            >
                üìã
            </button>
            
            {/* –ü–∞–Ω–µ–ª—å —Å –ø–æ–ª—è–º–∏ */}
            <FieldsPanel
                isOpen={isFieldsPanelOpen}
                loadedFiles={loadedFiles}
                onClose={closeFieldsPanel}
                onFieldClick={insertField}
                onFieldDragStart={handleFieldDragStart}
                onFieldDragEnd={handleFieldDragEnd}
            />
        </div>
    );
}

export default App;
